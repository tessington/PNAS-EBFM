total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- p.2
} else {
profit <- sign(p.1) * sign(p.2) * abs(p.2)  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
ub = 10,
method = "Nelder-Mead",
control=list(fnscale=-1)
)
ss<-uniroot.all.tim(f = delay.differential.eq,interval = c(0.00001,10),n = 100,input.pars=input.pars,F1=F1,F2=F2)
print(delay.differential.eq
)
n = 100
upper = 10
lower = 10
f <- delay.differential.eq
xseq <- seq(lower, upper, len = n + 1)
mod1<- rep(NA, n+1)
for (i in 1:(n+1)){
mod1[i]<-f(xseq[i], input.pars, F1, F2)
}
F2
F1
F1= exp(start[1])
F2 = exp(star[2])
F2 = exp(start[2])
start
F1
F2
xseq <- seq(lower, upper, len = n + 1)
mod1<- rep(NA, n+1)
for (i in 1:(n+1)){
mod1[i]<-f(xseq[i], input.pars, F1, F2)
}
mod <- f(xseq, input.pars, F1, F2)
mod - mod1
mod
xseq
lower = 0
xseq <- seq(lower, upper, len = n + 1)
xseq
xseq <- seq(lower, upper, len = n + 1)
mod1<- rep(NA, n+1)
for (i in 1:(n+1)){
mod1[i]<-f(xseq[i], input.pars, F1, F2)
}
mod <- f(xseq, input.pars, F1, F2)
mod - mod1
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod1<- rep(NA, n+1)
for (i in 1:(n+1)){
mod1[i]<-f(xseq[i], input.pars, F1, F2)
}
mod <- f(xseq, input.pars, F1, F2)
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, lower = xseq[i],
upper = xseq[i + 1], ...)$root)
return(Equi)
}
ss<-uniroot.all.tim(f = delay.differential.eq,interval = c(0.00001,10),n = 200,input.pars=input.pars,F1=F1,F2=F2)
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod1<- rep(NA, n+1)
for (i in 1:(n+1)){
mod1[i]<-f(xseq[i], input.pars, F1, F2)
}
mod <- f(xseq, input.pars, F1, F2)
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, lower = xseq[i],
upper = xseq[i + 1], ...)$root)
return(Equi)
}
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod<- rep(NA, n+1)
for (i in 1:(n+1)){
mod[i]<-f(xseq[i], input.pars, F1, F2)
}
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, lower = xseq[i],
upper = xseq[i + 1], input.pars, F1, F2)$root)
return(Equi)
}
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod<- rep(NA, n+1)
for (i in 1:(n+1)){
mod[i]<-f(xseq[i], input.pars, F1, F2)
}
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, intervel = xseq[i:(i+1)],lower = xseq[i], upper = xseq[i + 1], input.pars, F1, F2)$root)
return(Equi)
}
ss<-uniroot.all.tim(f = delay.differential.eq,interval = c(0.00001,10),n = 200,input.pars=input.pars,F1=F1,F2=F2)
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod<- rep(NA, n+1)
for (i in 1:(n+1)){
mod[i]<-f(xseq[i], input.pars, F1, F2)
}
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, interval = xseq[i:(i+1)],lower = xseq[i], upper = xseq[i + 1], input.pars, F1, F2)$root)
return(Equi)
}
ss<-uniroot.all.tim(f = delay.differential.eq,interval = c(0.00001,10),n = 200,input.pars=input.pars,F1=F1,F2=F2)
profit_cod <- function(logFs,input.pars, ub){
# Returns COD NPV but makes the NPV negative if herring NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
# Try different upper bounds of uniroot, only moving on if the ss is empty
ss<-uniroot.all.tim(f = delay.differential.eq,interval = c(0.00001,10),n = 200,input.pars=input.pars,F1=F1,F2=F2)
if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,5),input.pars=input.pars,F1=F1,F2=F2)
if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,2),input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- p.2
} else {
profit <- sign(p.1) * sign(p.2) * abs(p.2)  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
input.pars<-list(r=0.7,K=10,M2j=0.8,fprime=685,a=6.1e-4,b=2.93e-7,
theta=0.65,Cmax=5.88,p=.25,winf.star=0.02,
wr=0.005,d=0.75,M2=0.2,t.juv=4,fraction.egg.mort=0.0,
b.egg.pred.mult=0,DC.herring=0.25,g=0)
input.pars$p1=512
input.pars$p2=1191
input.pars$c1=511
input.pars$c2=811
input.pars$DC.herring=0.001
start <- c(log(0.3),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
ub = 10,
method = "Nelder-Mead",
control=list(fnscale=-1)
)
optim_for_cod
exp(-optim_for_cod)
exp(-optim_for_cod$pars)
exp(-optim_for_cod$par)
input.pars$DC.herring=0.001
start <- c(log(0.3),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
ub = 10,
method = "Nelder-Mead",
control=list(fnscale=-1)
)
opitm_for_cod
optim_for_cod
exp(optim_for_cod$par)
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
profit_herring <- function(logFs,input.pars){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
# Try different upper bounds of uniroot, only moving on if the ss is empty
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
#if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,5),input.pars=input.pars,F1=F1,F2=F2)
#if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,2),input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- p.1
} else {
profit <- sign(p.1) * sign(p.2) * abs(p.1)  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
start <- c(log(0.3),log(0.1))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
print(exp(optim_for_herring$par))
model.output<- list(codf = c(), herrf = c(), codNPV = c(), herrNPV = c())
model.output$codf[1] <- exp(optim_for_cod$par[2])
model.output$codNPV[1] <- (optim_for_cod$value)
model.output$herrf[1] <- exp(optim_for_herring$par[1])
model.output$herrNPV[1] <- (optim_for_herring$value)
input.pars$DC.herring=0.25
start <- c(log(0.15),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
ub = 5,
method = "BFGS",
control=list(fnscale=-1)
)
start<-c(log(0.3), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_hErring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
warnings()
exp(optim_for_herring$par)
logFs <- optim_for_herring$par
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
ss
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
total.profit<-p.1 + p.2
p.1
p.2
x2
x1
p.1
model.output$codf[2] <- exp(optim_for_cod$par[2])
model.output$codNPV[2] <- (optim_for_cod$value)
model.output$herrf[2] <- exp(optim_for_herring$par[1])
model.output$herrNPV[2] <- (optim_for_herring$value)
input.pars$fraction.egg.mort<-0.25
start <- c(log(0.15),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
start<-c(log(0.3), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
model.output$codf[2] <- exp(optim_for_cod$par[2])
model.output$codNPV[2] <- (optim_for_cod$value)
model.output$herrf[2] <- exp(optim_for_herring$par[1])
model.output$herrNPV[2] <- (optim_for_herring$value)
input.pars$b.egg.pred.mult<- 15
start <- c(log(0.15),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
start<-c(log(0.3), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
model.output$codf[2] <- exp(optim_for_cod$par[2])
model.output$codNPV[2] <- (optim_for_cod$value)
model.output$herrf[2] <- exp(optim_for_herring$par[1])
model.output$herrNPV[2] <- (optim_for_herring$value)
mode.output$codf
model.output$codf
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
input.pars$DC.herring=0.25
start <- c(log(0.15),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
start<-c(log(0.3), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
input.pars$DC.herring=0.001
start <- c(log(0.3),log(0.1))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
print(exp(optim_for_herring$par))
model.output<- list(codf = c(), herrf = c(), codNPV = c(), herrNPV = c())
model.output$codf[1] <- exp(optim_for_cod$par[2])
model.output$codNPV[1] <- (optim_for_cod$value)
model.output$herrf[1] <- exp(optim_for_herring$par[1])
model.output$herrNPV[1] <- (optim_for_herring$value)
input.pars$DC.herring=0.25
start <- c(log(0.15),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
start<-c(log(0.2), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
profit_herring <- function(logFs,input.pars){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
# Try different upper bounds of uniroot, only moving on if the ss is empty
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
#if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,5),input.pars=input.pars,F1=F1,F2=F2)
#if (length(ss)==0) ss<-uniroot.all(delay.differential.eq,c(0.0000,2),input.pars=input.pars,F1=F1,F2=F2)
print(c(F1, F2,ss))
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- p.1
} else {
profit <- sign(p.1) * sign(p.2) * abs(p.1)  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "Nelder-Mead",
control=list(fnscale=-1)
)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
start<-c(log(0.3), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_herring,
input.pars=input.pars,
method = "Nelder-Mead",
control=list(fnscale=-1)
)
model.output$codf[4] <- exp(optim_for_cod$par[2])
model.output$codNPV[4] <- (optim_for_cod$value)
model.output$herrf[4] <- exp(optim_for_herring$par[1])
model.output$herrNPV[4] <- (optim_for_herring$value)
model.output$codf
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
model.output$codf[1,1:2] <- exp(optim_for_cod$par)
model.output$codNPV[1] <- (optim_for_cod$value)
model.output$herrf[1,1:2] <- exp(optim_for_herring$par)
model.output$herrNPV[1] <- (optim_for_herring$value)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
optim_for_cod$par
model.output <- list()
model.output$codf[1,1:2] <- exp(optim_for_cod$par)
model.output$codf[1,1:2]
model.output$codNPV[1] <- (optim_for_cod$value)
model.output<- list(codf = matrix(NA, nrow =4, ncol = 2), herrf = c(), codNPV = c(), herrNPV = c())
model.output$codf[1,1:2] <- exp(optim_for_cod$par)
model.output<- list(codf = matrix(NA, nrow =4, ncol = 2), herrf = matrix(NA, nrow = 4, ncol =2), codNPV = c(), herrNPV = c())
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
model.output$codf
model.output$codNPV
input.pars$DC.herring=0.001
start <- c(log(0.0000000001),log(0.10))
input.pars<-list(r=0.7,K=10,M2j=0.8,fprime=685,a=6.1e-4,b=2.93e-7,
theta=0.65,Cmax=5.88,p=.25,winf.star=0.02,
wr=0.005,d=0.75,M2=0.2,t.juv=4,fraction.egg.mort=0.0,
b.egg.pred.mult=0,DC.herring=0.25,g=0)
input.pars$p1=512
input.pars$p2=1191
input.pars$c1=511
input.pars$c2=811
input.pars$DC.herring=0.001
start <- c(log(0.0000000001),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_cod,
input.pars=input.pars,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_cod
model.output$codNPV
model.output$herrf
model.output$herrNPV
gamma <- 0.04
t<-seq(0,19)
sum(exp(-gamma*t)*500)
500*20
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot Color Map NPV.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot Color Map NPV.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot Color Map NPV.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot Color Map NPV.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot SS Exploitation by FLAG.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve SS Conditions given Fs.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve SS Conditions given Fs.R', echo=TRUE)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve SS Conditions given Fs.R', echo=TRUE)
INITCOND
INITCOND
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Plot Risk Risk, NPV NPV.R')
