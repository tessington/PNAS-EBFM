B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"',')',sep="", header = F)))
paste('data','<-read.csv(file=','\"',filename,'\"',')',sep="", header = F)
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', "header = F)",sep="")))
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve Risk of Missing Targets.R')
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve Risk of Missing Targets.R')
risk.by.case
CASE=1
SIM = 1
FLAG = 1
risk.count <- c(0,0)
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
FLAG = 2
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve Risk of Missing Targets.R')
risk.count
risk.by.case
data
CASE = 3
risk.by.case
risk.thresh <- -20
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
for (CASE in 1:4){
for (SIM in 1:4){
risk.count <- c(0,0)
for (FLAG in 1:4){
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
for (i in 1:2) {
if (B2target[i]<=risk.thresh) risk.count[i]<- risk.count[i]+1
}
}
risk.by.case[[CASE]][1:2,SIM] <- risk.count
}
}
risk.by.case
risk.thresh <- -25
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
for (CASE in 1:4){
for (SIM in 1:4){
risk.count <- c(0,0)
for (FLAG in 1:4){
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
for (i in 1:2) {
if (B2target[i]<=risk.thresh) risk.count[i]<- risk.count[i]+1
}
}
risk.by.case[[CASE]][1:2,SIM] <- risk.count
}
}
risk.by.case
risk.thresh <- -50
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
for (CASE in 1:4){
for (SIM in 1:4){
risk.count <- c(0,0)
for (FLAG in 1:4){
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
for (i in 1:2) {
if (B2target[i]<=risk.thresh) risk.count[i]<- risk.count[i]+1
}
}
risk.by.case[[CASE]][1:2,SIM] <- risk.count
}
}
risk.by.case
library(rootSolve)
wd='/Users/essing/Dropbox/Desktop/Rcode/EggPredationModel/src'
setwd(wd)
source('delaydifferentialFN.R')
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
# This is a modified version of uni.root all that uses a loop rather than sending a vector the the function f.  The latter was returning incorrect values.  This makes is slower, I could probably use vapply instead
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod<- rep(NA, n+1)
mod <- vapply(X = xseq, FUN = f, input.pars = input.pars, F1 = F1, F2 = F2)
#for (i in 1:(n+1)){
#  mod[i]<-f(xseq[i], input.pars, F1, F2)
#}
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, interval = xseq[i:(i+1)],lower = xseq[i], upper = xseq[i + 1], input.pars, F1, F2)$root)
return(Equi)
}
profit_calc <- function(logFs,input.pars,x1target, x2target, species.2.use){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
profits <- c(p.1, p.2)
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- profits[species.2.use]
} else {
profit <- sign(p.1) * sign(p.2) * abs(profits(species.2.use))  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
input.pars<-list(r=0.7,K=10,M2j=0.8,fprime=685,a=6.1e-4,b=2.93e-7,
theta=0.65,Cmax=5.88,p=.25,winf.star=0.02,
wr=0.005,d=0.75,M2=0.2,t.juv=4,fraction.egg.mort=0.0,
b.egg.pred.mult=0,DC.herring=0.25,g=0)
input.pars$p1=512
input.pars$p2=1191
input.pars$c1=511
input.pars$c2=811
input.pars$DC.herring=0.001
start <- c(log(0.0000000001),log(0.10))
start <- c(log(0.0000000001),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = 5,
x2target = 1.13,
species.2.use = 2,
method = "BFGS",
control=list(fnscale=-1)
)
uniroot.all.tim <- function (f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.2, maxiter = 1000, n = 100, input.pars,  F1, F2)
{
# This is a modified version of uni.root all that uses a loop rather than sending a vector the the function f.  The latter was returning incorrect values.  This makes is slower, I could probably use vapply instead
if (!missing(interval) && length(interval) != 2)
stop("'interval' must be a vector of length 2")
if (!is.numeric(lower) || !is.numeric(upper) || lower >=
upper)
stop("lower < upper  is not fulfilled")
xseq <- seq(lower, upper, len = n + 1)
mod<- rep(NA, n+1)
mod <- vapply(X = xseq, FUN = f, FUN.VALUE = 1, input.pars = input.pars, F1 = F1, F2 = F2)
#for (i in 1:(n+1)){
#  mod[i]<-f(xseq[i], input.pars, F1, F2)
#}
Equi <- xseq[which(mod == 0)]
ss <- mod[1:n] * mod[2:(n + 1)]
ii <- which(ss < 0)
for (i in ii) Equi <- c(Equi, uniroot(f, interval = xseq[i:(i+1)],lower = xseq[i], upper = xseq[i + 1], input.pars, F1, F2)$root)
return(Equi)
}
profit_calc <- function(logFs,input.pars,x1target, x2target, species.2.use){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
profits <- c(p.1, p.2)
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- profits[species.2.use]
} else {
profit <- sign(p.1) * sign(p.2) * abs(profits(species.2.use))  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
optim_for_cod <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = 5,
x2target = 1.13,
species.2.use = 2,
method = "BFGS",
control=list(fnscale=-1)
)
profit_calc <- function(logFs,input.pars,x1target, x2target, species.2.use){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
profits <- c(p.1, p.2)
total.profit<-p.1 + p.2
if (p.1<0 & p.2 <0) {profit <- profits[species.2.use]
} else {
profit <- sign(p.1) * sign(p.2) * abs(profits[species.2.use])  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
return(profit)
}
optim_for_cod <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = 5,
x2target = 1.13,
species.2.use = 2,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_cod
profit_calc <- function(logFs,input.pars,x1target, x2target, species.2.use){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
profits <- c(p.1, p.2)
total.profit<-p.1 + p.2
b.to.target <- c(x1,x2) - c(x1target, x2target)
# now generate function.  Must be the following conditions:
# If either species is below target, profit is negative
# if either species profit is below 0, all profit is negative
if (min(b.to.target)<0) {
profit <- - abs(profits[species.2.use])
} else {
# check case when both profits are 0 (special case that ruins)
if (p.1<0 & p.2 <0) {profit <- profits[species.2.use]
} else {
profit <- sign(p.1) * sign(p.2) * abs(profits[species.2.use])  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
}
return(profit)
}
ctarget=1.133
htarget=5
profit_calc <- function(logFs,input.pars,x1target, x2target, species.2.use){
# Returns herring NPV but makes the NPV negative if cod NPV goes negative
# extract parameters
c1<-input.pars$c1
c2<-input.pars$c2
p1<-input.pars$p1
p2<-input.pars$p2
F1=exp(logFs[1])
F2=exp(logFs[2])
# get yield (assuming stable equilibrium)
ss<-uniroot.all.tim(f = delay.differential.eq,c(0.0000,10), n = 200, input.pars=input.pars,F1=F1,F2=F2)
x2<-max(ss)
y2<-x2 * (1-exp(-F2))
# solve for x1
ss.x1.n1 <- solve.x1.n1(x2,input.pars,F1,F2)
x1<-ss.x1.n1$x1
y1<-x1 * (1-exp(-F1))
# get costs and revenue
p.1 <- p1 * y1  - c1 * F1 - 1E-9 * F1 ^ 2
p.2 <- p2 * y2  - c2 * F2 - 1E-9 * F2 ^ 2
profits <- c(p.1, p.2)
total.profit<-p.1 + p.2
b.to.target <- c(x1,x2) - c(x1target, x2target)
# now generate function.  Must be the following conditions:
# If either species is below target, profit is negative
# if either species profit is below 0, all profit is negative
if (min(b.to.target)<0) {
profit <- - abs(profits[species.2.use])
} else {
# check case when both profits are 0 (special case that ruins)
if (p.1<0 & p.2 <0) {profit <- profits[species.2.use]
} else {
profit <- sign(p.1) * sign(p.2) * abs(profits[species.2.use])  # weird algorithm to make NPV negative ALWAYS if p.1 is less than 0, but also makes NPV negative ALWAYS if p2 is less than 0.
}
}
return(profit)
}
input.pars<-list(r=0.7,K=10,M2j=0.8,fprime=685,a=6.1e-4,b=2.93e-7,
theta=0.65,Cmax=5.88,p=.25,winf.star=0.02,
wr=0.005,d=0.75,M2=0.2,t.juv=4,fraction.egg.mort=0.0,
b.egg.pred.mult=0,DC.herring=0.25,g=0)
input.pars$p1=512
input.pars$p2=1191
input.pars$c1=511
input.pars$c2=811
ctarget=1.133
htarget=5
input.pars$DC.herring=0.001
start <- c(log(0.0000000001),log(0.10))
optim_for_cod <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = htarget,
x2target = ctarget,
species.2.use = 2,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_cod
start <- c(log(0.3),log(0.1))
optim_for_herring <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = htarget,
x2target = ctarget,
species.2.use = 1,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve_Max_NPV_By_Fishery.R')
warnings()
model.output$codf
model.output$herrf
input.pars<-list(r=0.7,K=10,M2j=0.8,fprime=685,a=6.1e-4,b=2.93e-7,
theta=0.65,Cmax=5.88,p=.25,winf.star=0.02,
wr=0.005,d=0.75,M2=0.2,t.juv=4,fraction.egg.mort=0.0,
b.egg.pred.mult=0,DC.herring=0.25,g=0)
input.pars$p1=512
input.pars$p2=1191
input.pars$c1=511
input.pars$c2=811
ctarget=1.133
input.pars$DC.herring=0.25
input.pars$fraction.egg.mort<-0.25
start<-c(log(0.25), log(.2))
optim_for_herring <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = htarget,
x2target = ctarget,
species.2.use = 1,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
exp(optim_for_herring$par)
model.output$herrf[3,] <- exp(optim_for_herring$par)
model.output$herrNPV[3] <- (optim_for_herring$value)
input.pars$b.egg.pred.mult<- 15
start <- c(log(0.15),log(0.10))
start<-c(log(0.25), log(.2125))
optim_for_herring <- optim(par = start,
fn = profit_calc,
input.pars=input.pars,
x1target = htarget,
x2target = ctarget,
species.2.use = 1,
method = "BFGS",
control=list(fnscale=-1)
)
optim_for_herring
model.output$herrf[4,] <- exp(optim_for_herring$par)
model.output$herrNPV[4] <- (optim_for_herring$value)
model.output$herrf
modek.output$codNPV
model.output$codNPV
model.output$herringNPV
model.output$herrNPV
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve Risk of Missing Targets.R')
risk.by.case
source('~/Dropbox/Desktop/Rcode/EggPredationModel/src/Solve Risk of Missing Targets.R')
risk.by.case
CASE = 4
SIM = 4
risk.count <- c(0,0)
FLAG = 1
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
help(matrix)
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4, dimnames = list(rownames = row_names, colnames = col_names)),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
row_names <- c("Cod", "Herring")
col_names <- c("Ind", "Pred", "Egg", "Dep")
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4, dimnames = list(rownames = row_names, colnames = col_names)),
highlow = matrix(NA, nrow = 2, ncol = 4),
lowhigh = matrix(NA, nrow = 2, ncol = 4),
lowlow = matrix(NA, nrow = 2, ncol = 4)
)
risk.by.case
dimnames = list(Species = row_names, Assumed = col_names)
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4,dimnames = dimnames),
highlow = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames),
lowhigh = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames),
lowlow = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames)
)
for (CASE in 1:4){
for (SIM in 1:4){
risk.count <- c(0,0)
for (FLAG in 1:4){
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
for (i in 1:2) {
if (B2target[i]<=risk.thresh) risk.count[i]<- risk.count[i]+1
}
}
risk.by.case[[CASE]][1:2,SIM] <- risk.count
}
}
risk.by.case
risk.thresh <- -50
row_names <- c("Cod", "Herring")
col_names <- c("Ind", "Pred", "Egg", "Dep")
dimnames = list(Species = row_names, Assumed = col_names)
risk.by.case <- list(highhigh = matrix(NA, nrow =2, ncol = 4,dimnames = dimnames),
highlow = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames),
lowhigh = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames),
lowlow = matrix(NA, nrow = 2, ncol = 4,dimnames = dimnames)
)
for (CASE in 1:4){
for (SIM in 1:4){
risk.count <- c(0,0)
for (FLAG in 1:4){
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
for (i in 1:2) {
if (B2target[i]<=risk.thresh) risk.count[i]<- risk.count[i]+1
}
}
risk.by.case[[CASE]][1:2,SIM] <- risk.count
}
}
risk.by.case
CASE = 1
SIM = 4
risk.count <- c(0,0)
FLAG = 1
filename=paste('output_sim_',CASE,'_', FLAG,'_',SIM,'.csv',sep="")
eval(parse(text=paste('data','<-read.csv(file=','\"',filename,'\"', ",header = F)",sep="")))
finalBs<-data[nrow(data),2:3]
B2target<-100*finalBs/c(Ctarget,Htarget)-100
B2target
